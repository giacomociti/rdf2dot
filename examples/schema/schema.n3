@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix v: <http://view/> .
@prefix attr: <http://view/dot/attribute/> .
@prefix : <http://view/schema/> .

### rules to collect metadata (see also schema.sparql)

{
  : :allows ?x .
}
<=
{
  ?x log:namespace ?ns .
  : log:uri [ log:notEqualTo ?ns ] .
  v: log:uri [ log:notEqualTo ?ns ] .
  attr: log:uri [ log:notEqualTo ?ns ] .
} .

{ [] ?p [] . : :allows ?p } => { ?p a :Predicate } .

{ [] a ?class . : :allows ?class } => { ?class a :Class } .


{ ?p a :Predicate . [ a ?domain ] ?p [] . : :allows ?domain } => { ?p :domainIncludes ?domain } .

{ ?p a :Predicate . [] ?p [ a ?range ] . : :allows ?range } => { ?p :rangeIncludes ?range } .

{ ?p a :Predicate . [] ?p [ log:rawType log:Literal ] } => { ?p :rangeIncludes rdfs:Literal } .

{
  ?p a :Predicate .
	?s ?p [] . 
  [] log:notIncludes { ?s a [] } .
}
=>
{
  ?p :domainIncludes rdfs:Resource
} .

{
  ?p a :Predicate .
	[] ?p ?o .
	?o log:rawType [ log:notEqualTo log:Literal ].
	[] log:notIncludes { ?o a [] }.
}
=>
{
  ?p :rangeIncludes rdfs:Resource
} .

{
  ?p1 a :Predicate .
  ?p2 a :Predicate .
  [] ?p1 ?o .
  ?o ?p2 [] .
  [] log:notIncludes { ?o a [] }.
}
=>
{
  ?p1 :chainedTo ?p2
} .


### visualization rules

{
	?class a :Class ; log:localName ?label
} 
=> 
{
	v:digraph v:hasNode ?class .
	?class attr:label ?label; 
    attr:URL ?class ; 
    attr:style "filled" ; 
    attr:fillcolor "#aaccff" .
}.

# each predicate is a rectangular node with its color
{
    (?p { ?p a :Predicate ; log:notEqualTo rdf:type } ?predicates) log:collectAllIn [] .

    ?predicates list:iterate (?index ?predicate) .
  
    (
        "red" "green" "blue" "orange" "purple" 
        "cyan" "magenta" "brown" "pink" "gray" 
        "darkred" "darkgreen" "darkblue" "darkorange" "darkviolet" 
        "darkcyan" "darkmagenta" "lime" "navy" "teal" 
        "olive" "maroon" "aqua" "fuchsia" "gold" 
        "coral" "indigo" "plum" "salmon" "sienna"
        "tan" "turquoise" "violet" "wheat" "blueviolet" 
        "burlywood" "cadetblue" "chartreuse" "chocolate" "cornflowerblue" 
        "darkgoldenrod" "darkkhaki" "darkolivegreen" "darkorchid" "darksalmon" 
        "darkseagreen" "darkslateblue" "darkslategray" "darkturquoise" "deeppink" 
        "deepskyblue" "dimgray" "dodgerblue" "firebrick" "forestgreen" 
      	"goldenrod" "greenyellow" "hotpink" "indianred" "lightcoral"
        "lightseagreen" "lightskyblue" "lightslategray" "lightsteelblue" "mediumaquamarine" 
      	"mediumblue" "mediumorchid" "mediumpurple" "mediumseagreen" "mediumslateblue"
        "mediumspringgreen" "mediumturquoise" "mediumvioletred" "midnightblue" "olivedrab" 
        "orangered" "orchid" "palegoldenrod" "palegreen" "paleturquoise" 
        "palevioletred" "peru" "powderblue" "rosybrown" "royalblue"
        "saddlebrown" "sandybrown" "seagreen" "skyblue" "slateblue" 
        "springgreen" "steelblue" "thistle" "tomato" "yellowgreen"
    ) list:iterate (?index ?color) .
    
  	?predicate log:localName ?label .
} 
=> 
{
    v:digraph v:hasNode ?predicate.
    ?predicate attr:shape "box" ;
    	attr:URL ?predicate ;
     	attr:label ?label ;
     	attr:fontcolor ?color ;
     	attr:color ?color .
}.

{
  ?p :domainIncludes ?domain .
  ?domain log:notEqualTo rdfs:Resource .
	?p attr:color ?color .
} 
=> 
{
	v:digraph v:hasEdge [ v:source ?domain; v:target ?p ; attr:color ?color ; attr:dir "none" ]
} .

{
  ?p :rangeIncludes ?range .
  ?range log:notEqualTo rdfs:Literal, rdfs:Resource .
	?p attr:color ?color .
} 
=> 
{
	v:digraph v:hasEdge [ v:source ?p; v:target ?range ; attr:color ?color ]
} .

{
  ?p :rangeIncludes rdfs:Literal .
	?p attr:color ?color .
} 
=> 
{
	v:digraph v:hasNode _:lit .
 	_:lit attr:shape "box"; attr:label "Literal" ; attr:URL rdfs:Literal ; attr:style "filled, dashed"; attr:fillcolor "#ffcc33" .
	v:digraph v:hasEdge [ v:source ?p; v:target _:lit ; attr:color ?color ]
} .

# add a Resource source, unless chained from another predicate
# because in this case there is already an incoming link
{
    ?p :domainIncludes rdfs:Resource .
    [] log:notIncludes { [] :chainedTo ?p } .
  	?p attr:color ?color .
} 
=> 
{
	v:digraph v:hasNode _:res .
	_:res attr:label "Resource" ; attr:URL rdfs:Resource ; attr:style "dashed".
	v:digraph v:hasEdge [ v:source _:res; v:target ?p ; attr:dir "none" ; attr:color ?color ]
} .

# add a Resource target, keeping track of the predicate
{
  ?p :rangeIncludes rdfs:Resource .
	?p attr:color ?color .
} 
=> 
{
	v:digraph v:hasNode _:res .
	_:res attr:label "Resource" ; attr:URL rdfs:Resource ; attr:style "dashed" ; v:resourceRangeOf ?p .
	v:digraph v:hasEdge [ v:source ?p; v:target _:res ; attr:color ?color ]
} .

# add the edge only if ?p1 has a resource range
{
  ?p1 :chainedTo ?p2 .
  ?n1 v:resourceRangeOf ?p1 .
  ?n2 attr:URL ?p2 .
} 
=> 
{
  v:digraph v:hasEdge [ v:source ?n1; v:target ?n2 ; attr:style "dashed" ; attr:dir "none"]
}.